{
  "info": {
    "_postman_id": "b9c8d7e6-f5a4-b3c2-d1e0-f9g8h7i6j5k4",
    "name": "FitPlanPro - User Management API Tests",
    "description": "Non-Regression Tests for FitPlanPro User Management API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Environment Setup",
      "item": [
        {
          "name": "Initialize Test Environment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Set base URL for API",
                  "pm.environment.set(\"baseUrl\", \"http://localhost:8080/api\");",
                  "",
                  "// Generate unique test data",
                  "const timestamp = new Date().getTime();",
                  "const testEmail = `user.mgmt.${timestamp}@example.com`;",
                  "const testPhone = `+1${Math.floor(1000000000 + Math.random() * 9000000000)}`;",
                  "const testPassword = \"UserMgmt123!\";",
                  "",
                  "pm.environment.set(\"testEmail\", testEmail);",
                  "pm.environment.set(\"testPhone\", testPhone);",
                  "pm.environment.set(\"testPassword\", testPassword);",
                  "",
                  "// Generate test data for updates",
                  "const newEmail = `updated.${timestamp}@example.com`;",
                  "const newPhone = `+1${Math.floor(1000000000 + Math.random() * 9000000000)}`;",
                  "pm.environment.set(\"newEmail\", newEmail);",
                  "pm.environment.set(\"newPhone\", newPhone);",
                  "",
                  "// Generate admin test data",
                  "const adminEmail = `admin.${timestamp}@example.com`;",
                  "pm.environment.set(\"adminEmail\", adminEmail);",
                  "",
                  "// Set password change test data",
                  "pm.environment.set(\"newPassword\", \"NewUserMgmt456!\");",
                  "",
                  "// Generate long string for payload testing",
                  "const longString = 'a'.repeat(10000);",
                  "pm.environment.set(\"longString\", longString);",
                  "",
                  "console.log(`Test email: ${testEmail}`);",
                  "console.log(`Test phone: ${testPhone}`);",
                  "console.log(`New email: ${newEmail}`);",
                  "",
                  "pm.test(\"Environment variables initialized successfully\", function() {",
                  "    pm.expect(pm.environment.get(\"baseUrl\")).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get(\"testEmail\")).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get(\"testPassword\")).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get(\"newEmail\")).to.not.be.undefined;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}",
              "host": [
                "{{baseUrl}}"
              ]
            },
            "description": "Initialize environment variables for user management testing"
          },
          "response": []
        },
        {
          "name": "Create Test User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Test user created successfully\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.token).to.be.a('string');",
                  "    ",
                  "    // Store authentication data",
                  "    pm.environment.set(\"authToken\", responseData.data.token);",
                  "    pm.environment.set(\"userId\", responseData.data.user.id);",
                  "    ",
                  "    console.log(`Test user created with ID: ${responseData.data.user.id}`);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"phone\": \"{{testPhone}}\",\n    \"password\": \"{{testPassword}}\",\n    \"languagePreference\": \"ENGLISH\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "description": "Create a test user for user management testing"
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Information Tests",
      "item": [
        {
          "name": "Get Current User - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"User retrieved successfully\");",
                  "    pm.expect(responseData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"User data contains expected fields\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    pm.expect(userData).to.have.property('id');",
                  "    pm.expect(userData).to.have.property('email');",
                  "    pm.expect(userData).to.have.property('phone');",
                  "    pm.expect(userData).to.have.property('languagePreference');",
                  "    pm.expect(userData).to.have.property('createdAt');",
                  "    pm.expect(userData).to.have.property('lastLogin');",
                  "    ",
                  "    // Verify user data matches what we created",
                  "    pm.expect(userData.email).to.equal(pm.environment.get(\"testEmail\"));",
                  "    pm.expect(userData.phone).to.equal(pm.environment.get(\"testPhone\"));",
                  "    pm.expect(userData.languagePreference).to.equal(\"ENGLISH\");",
                  "    ",
                  "    // Password should not be included",
                  "    pm.expect(userData).to.not.have.property('password');",
                  "    pm.expect(userData).to.not.have.property('passwordHash');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Get current authenticated user information"
          },
          "response": []
        },
        {
          "name": "Get Current User - Unauthenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response indicates authentication error\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Attempt to get user info without authentication"
          },
          "response": []
        },
        {
          "name": "Get Current User - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response indicates invalid token\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid.jwt.token.here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Attempt to get user info with invalid token"
          },
          "response": []
        },
        {
          "name": "Get User By ID - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"User retrieved successfully\");",
                  "    pm.expect(responseData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"User data matches expected ID\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "    pm.expect(userData.email).to.equal(pm.environment.get(\"testEmail\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}"
              ]
            },
            "description": "Get user information by ID"
          },
          "response": []
        },
        {
          "name": "Get User By ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response indicates user not found\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/99999",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "99999"
              ]
            },
            "description": "Attempt to get a non-existent user"
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Update Tests",
      "item": [
        {
          "name": "Update User - Email Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"User updated successfully\");",
                  "    pm.expect(responseData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Email has been updated correctly\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    pm.expect(userData.email).to.equal(pm.environment.get(\"newEmail\"));",
                  "    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "    ",
                  "    // Update environment variable for subsequent tests",
                  "    pm.environment.set(\"testEmail\", userData.email);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{newEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Update user email address"
          },
          "response": []
        },
        {
          "name": "Update User - Phone Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Phone has been updated correctly\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    pm.expect(userData.phone).to.equal(pm.environment.get(\"newPhone\"));",
                  "    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "    ",
                  "    // Update environment variable for subsequent tests",
                  "    pm.environment.set(\"testPhone\", userData.phone);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"phone\": \"{{newPhone}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Update user phone number"
          },
          "response": []
        },
        {
          "name": "Update User - Language Preference",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Language preference updated correctly\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    pm.expect(userData.languagePreference).to.equal(\"FRENCH\");",
                  "    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"languagePreference\": \"FRENCH\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Update user language preference"
          },
          "response": []
        },
        {
          "name": "Update User - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error for email\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.errors).to.be.an('object');",
                  "    pm.expect(responseData.errors).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"invalid-email-format\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Attempt to update with invalid email format"
          },
          "response": []
        },
        {
          "name": "Update User - Invalid Phone",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error for phone\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.errors).to.be.an('object');",
                  "    pm.expect(responseData.errors).to.have.property('phone');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"phone\": \"invalid-phone\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Attempt to update with invalid phone format"
          },
          "response": []
        },
        {
          "name": "Update User - Unauthenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response indicates authentication error\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"unauthorized@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Attempt to update user without authentication"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Password Management Tests",
      "item": [
        {
          "name": "Change Password - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates password changed successfully\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Password changed successfully\");",
                  "    ",
                  "    // Update environment variable for subsequent tests",
                  "    pm.environment.set(\"testPassword\", pm.environment.get(\"newPassword\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"{{testPassword}}\",\n    \"newPassword\": \"{{newPassword}}\",\n    \"confirmPassword\": \"{{newPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/change-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "change-password"
              ]
            },
            "description": "Change user password with valid current password"
          },
          "response": []
        },
        {
          "name": "Change Password - Wrong Current Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response indicates incorrect current password\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"incorrect\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"WrongPassword123!\",\n    \"newPassword\": \"AnotherNew456!\",\n    \"confirmPassword\": \"AnotherNew456!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/change-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "change-password"
              ]
            },
            "description": "Attempt to change password with incorrect current password"
          },
          "response": []
        },
        {
          "name": "Change Password - Password Mismatch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response indicates password mismatch\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"do not match\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"{{testPassword}}\",\n    \"newPassword\": \"NewPassword123!\",\n    \"confirmPassword\": \"DifferentPassword456!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/change-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "change-password"
              ]
            },
            "description": "Attempt to change password with mismatched new password and confirmation"
          },
          "response": []
        },
        {
          "name": "Change Password - Weak New Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  ",