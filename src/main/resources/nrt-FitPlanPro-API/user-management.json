{
  "info": {
    "_postman_id": "b9c8d7e6-f5a4-b3c2-d1e0-f9g8h7i6j5k4",
    "name": "FitPlanPro - User Management API Tests",
    "description": "Non-Regression Tests for FitPlanPro User Management API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Environment Setup",
      "item": [
        {
          "name": "Initialize Test Environment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Set base URL for API",
                  "pm.environment.set(\"baseUrl\", \"http://localhost:8080/api\");",
                  "",
                  "// Generate unique test data",
                  "const timestamp = new Date().getTime();",
                  "const testEmail = `user.mgmt.${timestamp}@example.com`;",
                  "const testPhone = `+1${Math.floor(1000000000 + Math.random() * 9000000000)}`;",
                  "const testPassword = \"UserMgmt123!\";",
                  "",
                  "pm.environment.set(\"testEmail\", testEmail);",
                  "pm.environment.set(\"testPhone\", testPhone);",
                  "pm.environment.set(\"testPassword\", testPassword);",
                  "",
                  "// Generate test data for updates",
                  "const newEmail = `updated.${timestamp}@example.com`;",
                  "const newPhone = `+1${Math.floor(1000000000 + Math.random() * 9000000000)}`;",
                  "pm.environment.set(\"newEmail\", newEmail);",
                  "pm.environment.set(\"newPhone\", newPhone);",
                  "",
                  "// Generate admin test data",
                  "const adminEmail = `admin.${timestamp}@example.com`;",
                  "pm.environment.set(\"adminEmail\", adminEmail);",
                  "",
                  "// Set password change test data",
                  "pm.environment.set(\"newPassword\", \"NewUserMgmt456!\");",
                  "",
                  "console.log(`Test email: ${testEmail}`);",
                  "console.log(`Test phone: ${testPhone}`);",
                  "console.log(`New email: ${newEmail}`);",
                  "",
                  "pm.test(\"Environment variables initialized successfully\", function() {",
                  "    pm.expect(pm.environment.get(\"baseUrl\")).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get(\"testEmail\")).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get(\"testPassword\")).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get(\"newEmail\")).to.not.be.undefined;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Large payload handled appropriately\", function() {",
                  "    // Should return 400 for oversized data or 413 for payload too large",
                  "    const statusCode = pm.response.code;",
                  "    pm.expect([400, 413, 500]).to.include(statusCode);",
                  "});",
                  "",
                  "pm.test(\"Server doesn't crash with large payload\", function() {",
                  "    // Ensure we get a proper HTTP response, not a connection error",
                  "    pm.expect(pm.response.code).to.be.a('number');",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{longString}}@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Test with unusually large payload"
          },
          "response": []
        },
        {
          "name": "Rate Limiting Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Rate limiting or normal response\", function() {",
                  "    // Should either succeed or return rate limit error",
                  "    const statusCode = pm.response.code;",
                  "    pm.expect([200, 429]).to.include(statusCode);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test(\"Rate limit response has proper structure\", function() {",
                  "        const responseData = pm.response.json();",
                  "        pm.expect(responseData.success).to.be.false;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Test for rate limiting (may need multiple rapid requests)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin User Management Tests",
      "item": [
        {
          "name": "Create Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Admin user created successfully\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    ",
                  "    // Store admin authentication data",
                  "    pm.environment.set(\"adminAuthToken\", responseData.data.token);",
                  "    pm.environment.set(\"adminUserId\", responseData.data.user.id);",
                  "    ",
                  "    console.log(`Admin user created with ID: ${responseData.data.user.id}`);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"AdminUser123!\",\n    \"languagePreference\": \"ENGLISH\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "description": "Create an admin user for testing admin endpoints"
          },
          "response": []
        },
        {
          "name": "Admin Get User By ID - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Admin can access user by ID\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "});",
                  "",
                  "pm.test(\"Admin gets complete user information\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    pm.expect(userData).to.have.property('email');",
                  "    pm.expect(userData).to.have.property('phone');",
                  "    pm.expect(userData).to.have.property('languagePreference');",
                  "    pm.expect(userData).to.have.property('createdAt');",
                  "    pm.expect(userData).to.have.property('lastLogin');",
                  "    ",
                  "    // Sensitive data should still not be exposed",
                  "    pm.expect(userData).to.not.have.property('password');",
                  "    pm.expect(userData).to.not.have.property('passwordHash');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}"
              ]
            },
            "description": "Admin retrieves user information by ID"
          },
          "response": []
        },
        {
          "name": "Admin Get Non-Existent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Admin gets proper error for non-existent user\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/999999",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "999999"
              ]
            },
            "description": "Admin attempts to get non-existent user"
          },
          "response": []
        },
        {
          "name": "Non-Admin Access User By ID - Should Succeed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Based on your code, the getUserById endpoint doesn't seem to have admin restrictions",
                  "// It only requires authentication. This test verifies the current behavior.",
                  "pm.test(\"Regular user can access user by ID\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}"
              ]
            },
            "description": "Regular user attempts to access user by ID"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cross-User Access Tests",
      "item": [
        {
          "name": "Create Second Test User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email for second user",
                  "const timestamp = new Date().getTime();",
                  "const secondUserEmail = `second.user.${timestamp}@example.com`;",
                  "pm.environment.set(\"secondUserEmail\", secondUserEmail);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Second user created successfully\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    ",
                  "    // Store second user data",
                  "    pm.environment.set(\"secondUserToken\", responseData.data.token);",
                  "    pm.environment.set(\"secondUserId\", responseData.data.user.id);",
                  "    ",
                  "    console.log(`Second user created: ${responseData.data.user.email}`);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{secondUserEmail}}\",\n    \"password\": \"SecondUser123!\",\n    \"languagePreference\": \"ARABIC\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "description": "Create a second user for cross-user access testing"
          },
          "response": []
        },
        {
          "name": "User A Access User B Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User can access other user's data by ID\", function() {",
                  "    // Based on the code, getUserById doesn't restrict access to own data only",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.id).to.equal(parseInt(pm.environment.get(\"secondUserId\")));",
                  "});",
                  "",
                  "pm.test(\"Retrieved user data is for correct user\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    pm.expect(userData.email).to.equal(pm.environment.get(\"secondUserEmail\"));",
                  "    pm.expect(userData.languagePreference).to.equal(\"ARABIC\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{secondUserId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{secondUserId}}"
              ]
            },
            "description": "First user attempts to access second user's data"
          },
          "response": []
        },
        {
          "name": "User B Access User A Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User B can access User A's data\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "});",
                  "",
                  "pm.test(\"Retrieved data is for correct user\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    pm.expect(userData.email).to.equal(pm.environment.get(\"testEmail\"));",
                  "    pm.expect(userData.languagePreference).to.equal(\"FRENCH\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{secondUserToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}"
              ]
            },
            "description": "Second user attempts to access first user's data"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Data Consistency and Integrity Tests",
      "item": [
        {
          "name": "Verify User A Current State",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User A data is consistent\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    // Verify all updates from previous tests are still present",
                  "    pm.expect(userData.email).to.equal(pm.environment.get(\"testEmail\"));",
                  "    pm.expect(userData.phone).to.equal(pm.environment.get(\"testPhone\"));",
                  "    pm.expect(userData.languagePreference).to.equal(\"FRENCH\");",
                  "    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "});",
                  "",
                  "pm.test(\"Timestamps are valid and consistent\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    // Verify timestamps are valid dates",
                  "    const createdAt = new Date(userData.createdAt);",
                  "    const lastLogin = new Date(userData.lastLogin);",
                  "    ",
                  "    pm.expect(createdAt).to.be.a('date');",
                  "    pm.expect(lastLogin).to.be.a('date');",
                  "    pm.expect(lastLogin.getTime()).to.be.greaterThan(createdAt.getTime());",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Verify User A's current state and data consistency"
          },
          "response": []
        },
        {
          "name": "Verify User B Current State",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User B data is consistent\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    // Verify User B data is intact and separate from User A",
                  "    pm.expect(userData.email).to.equal(pm.environment.get(\"secondUserEmail\"));",
                  "    pm.expect(userData.languagePreference).to.equal(\"ARABIC\");",
                  "    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"secondUserId\")));",
                  "    ",
                  "    // Verify User B is different from User A",
                  "    pm.expect(userData.id).to.not.equal(parseInt(pm.environment.get(\"userId\")));",
                  "    pm.expect(userData.email).to.not.equal(pm.environment.get(\"testEmail\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{secondUserToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Verify User B's current state and data separation"
          },
          "response": []
        },
        {
          "name": "Test User Isolation - Update User B",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User B update successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.languagePreference).to.equal(\"ENGLISH\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{secondUserToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"languagePreference\": \"ENGLISH\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Update User B to test user data isolation"
          },
          "response": []
        },
        {
          "name": "Verify User A Unaffected by User B Update",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User A data unaffected by User B update\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    // User A should still have French language preference",
                  "    pm.expect(userData.languagePreference).to.equal(\"FRENCH\");",
                  "    pm.expect(userData.email).to.equal(pm.environment.get(\"testEmail\"));",
                  "    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Verify User A's data remains unchanged after User B update"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Concurrent User Operations",
      "item": [
        {
          "name": "Concurrent Password Change Test Setup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test simulates what might happen with concurrent password changes",
                  "pm.test(\"Setup for concurrent operations complete\", function() {",
                  "    pm.expect(true).to.be.true;",
                  "});",
                  "",
                  "// Store original passwords for testing",
                  "pm.environment.set(\"userAPassword\", pm.environment.get(\"testPassword\"));",
                  "pm.environment.set(\"userBPassword\", \"SecondUser123!\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}",
              "host": [
                "{{baseUrl}}"
              ]
            },
            "description": "Setup for concurrent operations testing"
          },
          "response": []
        },
        {
          "name": "User A Password Change",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User A password change successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    ",
                  "    // Update stored password",
                  "    pm.environment.set(\"userAPassword\", \"NewUserAPassword123!\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"{{userAPassword}}\",\n    \"newPassword\": \"NewUserAPassword123!\",\n    \"confirmPassword\": \"NewUserAPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/change-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "change-password"
              ]
            },
            "description": "User A changes password"
          },
          "response": []
        },
        {
          "name": "User B Password Change (Simultaneous)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User B password change successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    ",
                  "    // Update stored password",
                  "    pm.environment.set(\"userBPassword\", \"NewUserBPassword123!\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{secondUserToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"{{userBPassword}}\",\n    \"newPassword\": \"NewUserBPassword123!\",\n    \"confirmPassword\": \"NewUserBPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/change-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "change-password"
              ]
            },
            "description": "User B changes password (simulating concurrent operation)"
          },
          "response": []
        },
        {
          "name": "Verify Both Users Can Login With New Passwords",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User A can login with new password\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.user.email).to.equal(pm.environment.get(\"testEmail\"));",
                  "    ",
                  "    // Update token",
                  "    pm.environment.set(\"authToken\", responseData.data.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"emailOrPhone\": \"{{testEmail}}\",\n    \"password\": \"{{userAPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Verify User A can login with new password"
          },
          "response": []
        },
        {
          "name": "Verify User B Can Login With New Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User B can login with new password\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.user.email).to.equal(pm.environment.get(\"secondUserEmail\"));",
                  "    ",
                  "    // Update token",
                  "    pm.environment.set(\"secondUserToken\", responseData.data.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"emailOrPhone\": \"{{secondUserEmail}}\",\n    \"password\": \"{{userBPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Verify User B can login with new password"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Final Verification",
      "item": [
        {
          "name": "Final User Status Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Main test user still exists and accessible\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "});",
                  "",
                  "pm.test(\"User data integrity maintained throughout tests\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const userData = responseData.data;",
                  "    ",
                  "    // Verify final state",
                  "    pm.expect(userData.email).to.equal(pm.environment.get(\"testEmail\"));",
                  "    pm.expect(userData.phone).to.equal(pm.environment.get(\"testPhone\"));",
                  "    pm.expect(userData.languagePreference).to.equal(\"FRENCH\");",
                  "    ",
                  "    // Verify required fields are present",
                  "    pm.expect(userData).to.have.property('id');",
                  "    pm.expect(userData).to.have.property('createdAt');",
                  "    pm.expect(userData).to.have.property('lastLogin');",
                  "    ",
                  "    // Verify sensitive data is not exposed",
                  "    pm.expect(userData).to.not.have.property('password');",
                  "    pm.expect(userData).to.not.have.property('passwordHash');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "Final verification that the main test user is in expected state"
          },
          "response": []
        },
        {
          "name": "Test Summary and Cleanup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test completed successfully if we reach here",
                  "pm.test(\"User management test suite completed\", function() {",
                  "    pm.expect(true).to.be.true;",
                  "});",
                  "",
                  "// Log test summary",
                  "console.log(\"=== USER MANAGEMENT TEST SUMMARY ===\");",
                  "console.log(`Test User Email: ${pm.environment.get(\"testEmail\")}`);",
                  "console.log(`Test User ID: ${pm.environment.get(\"userId\")}`);",
                  "console.log(`Final Phone: ${pm.environment.get(\"testPhone\")}`);",
                  "console.log(`Password Changed: ${pm.environment.get(\"testPassword\") !== 'UserMgmt123!'}`);",
                  "console.log(\"Test Suite: COMPLETED\");",
                  "",
                  "// Optional: Clean up environment variables if needed",
                  "// pm.environment.unset(\"tempAuthToken\");",
                  "// pm.environment.unset(\"tempUserId\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}",
              "host": [
                "{{baseUrl}}"
              ]
            },
            "description": "Test summary and cleanup"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "if (!pm.environment.get(\"baseUrl\")) {",
          "    pm.environment.set(\"baseUrl\", \"http://localhost:8080/api\");",
          "}",
          "",
          "// Log request for debugging",
          "console.log(`Executing: ${pm.info.requestName}`);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test validations",
          "pm.test(\"Response time is reasonable\", function() {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Ensure proper content type for non-error responses",
          "if (pm.response.code < 500) {",
          "    pm.test(\"Response content-type is JSON\", function() {",
          "        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
          "    });",
          "}",
          "",
          "// Ensure response has proper structure for API responses",
          "if (pm.response.code !== 404 && pm.response.code !== 500) {",
          "    try {",
          "        const responseData = pm.response.json();",
          "        pm.test(\"Response has required API structure\", function() {",
          "            pm.expect(responseData).to.have.property('success');",
          "            pm.expect(responseData).to.have.property('message');",
          "        });",
          "    } catch (e) {",
          "        // Skip structure test if response is not JSON",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/api",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string",
      "description": "Email for the test user"
    },
    {
      "key": "testPhone",
      "value": "",
      "type": "string",
      "description": "Phone number for the test user"
    },
    {
      "key": "testPassword",
      "value": "",
      "type": "string",
      "description": "Password for the test user"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT authentication token"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string",
      "description": "Test user ID"
    },
    {
      "key": "newEmail",
      "value": "",
      "type": "string",
      "description": "New email for update tests"
    },
    {
      "key": "newPhone",
      "value": "",
      "type": "string",
      "description": "New phone for update tests"
    },
    {
      "key": "newPassword",
      "value": "",
      "type": "string",
      "description": "New password for change tests"
    },
    {
      "key": "adminEmail",
      "value": "",
      "type": "string",
      "description": "Admin user email for privileged tests"
    },
    {
      "key": "conflictEmail",
      "value": "",
      "type": "string",
      "description": "Email for conflict testing"
    },
    {
      "key": "tempAuthToken",
      "value": "",
      "type": "string",
      "description": "Temporary user token for deletion tests"
    },
    {
      "key": "tempUserId",
      "value": "",
      "type": "string",
      "description": "Temporary user ID for deletion tests"
    },
    {
      "key": "tempUserEmail",
      "value": "",
      "type": "string",
      "description": "Temporary user email for deletion tests"
    },
    {
      "key": "tempUserEmailForDeletion",
      "value": "",
      "type": "string",
      "description": "Email for user to be deleted"
    },
    {
      "key": "longString",
      "value": "",
      "type": "string",
      "description": "Long string for payload testing"
    }
  ]
}/javascript"
}
}
],
"request": {
"method": "GET",
"header": [],
"url": {
"raw": "{{baseUrl}}",
"host": [
"{{baseUrl}}"
]
},
"description": "Initialize environment variables for user management testing"
},
"response": []
},
{
"name": "Create Test User",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Test user created successfully\", function() {",
"    pm.response.to.have.status(201);",
"    ",
"    const responseData = pm.response.json();",
"    pm.expect(responseData.success).to.be.true;",
"    pm.expect(responseData.data.token).to.be.a('string');",
"    ",
"    // Store authentication data",
"    pm.environment.set(\"authToken\", responseData.data.token);",
"    pm.environment.set(\"userId\", responseData.data.user.id);",
"    ",
"    console.log(`Test user created with ID: ${responseData.data.user.id}`);",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"phone\": \"{{testPhone}}\",\n    \"password\": \"{{testPassword}}\",\n    \"languagePreference\": \"ENGLISH\"\n}"
},
"url": {
"raw": "{{baseUrl}}/auth/register",
"host": [
"{{baseUrl}}"
],
"path": [
"auth",
"register"
]
},
"description": "Create a test user for user management testing"
},
"response": []
}
]
},
{
"name": "User Information Tests",
"item": [
{
"name": "Get Current User - Success",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"Response has correct structure\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData).to.be.an('object');",
"    pm.expect(responseData.success).to.be.true;",
"    pm.expect(responseData.message).to.equal(\"User retrieved successfully\");",
"    pm.expect(responseData.data).to.be.an('object');",
"});",
"",
"pm.test(\"User data contains expected fields\", function() {",
"    const responseData = pm.response.json();",
"    const userData = responseData.data;",
"    ",
"    pm.expect(userData).to.have.property('id');",
"    pm.expect(userData).to.have.property('email');",
"    pm.expect(userData).to.have.property('phone');",
"    pm.expect(userData).to.have.property('languagePreference');",
"    pm.expect(userData).to.have.property('createdAt');",
"    pm.expect(userData).to.have.property('lastLogin');",
"    ",
"    // Verify user data matches what we created",
"    pm.expect(userData.email).to.equal(pm.environment.get(\"testEmail\"));",
"    pm.expect(userData.phone).to.equal(pm.environment.get(\"testPhone\"));",
"    pm.expect(userData.languagePreference).to.equal(\"ENGLISH\");",
"    ",
"    // Password should not be included",
"    pm.expect(userData).to.not.have.property('password');",
"    pm.expect(userData).to.not.have.property('passwordHash');",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "GET",
"header": [
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Get current authenticated user information"
},
"response": []
},
{
"name": "Get Current User - Unauthenticated",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Response indicates authentication error\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "GET",
"header": [],
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Attempt to get user info without authentication"
},
"response": []
},
{
"name": "Get Current User - Invalid Token",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Response indicates invalid token\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "GET",
"header": [
{
"key": "Authorization",
"value": "Bearer invalid.jwt.token.here"
}
],
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Attempt to get user info with invalid token"
},
"response": []
},
{
"name": "Get User By ID - Success",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"Response has correct structure\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData).to.be.an('object');",
"    pm.expect(responseData.success).to.be.true;",
"    pm.expect(responseData.message).to.equal(\"User retrieved successfully\");",
"    pm.expect(responseData.data).to.be.an('object');",
"});",
"",
"pm.test(\"User data matches expected ID\", function() {",
"    const responseData = pm.response.json();",
"    const userData = responseData.data;",
"    ",
"    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
"    pm.expect(userData.email).to.equal(pm.environment.get(\"testEmail\"));",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "GET",
"header": [
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"url": {
"raw": "{{baseUrl}}/users/{{userId}}",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"{{userId}}"
]
},
"description": "Get user information by ID (admin endpoint)"
},
"response": []
},
{
"name": "Get User By ID - Not Found",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 404 Not Found\", function() {",
"    pm.response.to.have.status(404);",
"});",
"",
"pm.test(\"Response indicates user not found\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    pm.expect(responseData.message).to.include(\"not found\");",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "GET",
"header": [
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"url": {
"raw": "{{baseUrl}}/users/99999",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"99999"
]
},
"description": "Attempt to get a non-existent user"
},
"response": []
}
]
},
{
"name": "User Update Tests",
"item": [
{
"name": "Update User - Email Success",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"Response has correct structure\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData).to.be.an('object');",
"    pm.expect(responseData.success).to.be.true;",
"    pm.expect(responseData.message).to.equal(\"User updated successfully\");",
"    pm.expect(responseData.data).to.be.an('object');",
"});",
"",
"pm.test(\"Email has been updated correctly\", function() {",
"    const responseData = pm.response.json();",
"    const userData = responseData.data;",
"    ",
"    pm.expect(userData.email).to.equal(pm.environment.get(\"newEmail\"));",
"    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
"    ",
"    // Update environment variable for subsequent tests",
"    pm.environment.set(\"testEmail\", userData.email);",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"email\": \"{{newEmail}}\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Update user email address"
},
"response": []
},
{
"name": "Update User - Phone Success",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"Phone has been updated correctly\", function() {",
"    const responseData = pm.response.json();",
"    const userData = responseData.data;",
"    ",
"    pm.expect(userData.phone).to.equal(pm.environment.get(\"newPhone\"));",
"    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
"    ",
"    // Update environment variable for subsequent tests",
"    pm.environment.set(\"testPhone\", userData.phone);",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"phone\": \"{{newPhone}}\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Update user phone number"
},
"response": []
},
{
"name": "Update User - Language Preference",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"Language preference updated correctly\", function() {",
"    const responseData = pm.response.json();",
"    const userData = responseData.data;",
"    ",
"    pm.expect(userData.languagePreference).to.equal(\"ARABIC\");",
"    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"languagePreference\": \"ARABIC\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Update user language preference"
},
"response": []
},
{
"name": "Update User - Multiple Fields",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"Multiple fields updated correctly\", function() {",
"    const responseData = pm.response.json();",
"    const userData = responseData.data;",
"    ",
"    pm.expect(userData.languagePreference).to.equal(\"FRENCH\");",
"    // Email and phone should remain from previous updates",
"    pm.expect(userData.email).to.equal(pm.environment.get(\"newEmail\"));",
"    pm.expect(userData.phone).to.equal(pm.environment.get(\"newPhone\"));",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"languagePreference\": \"FRENCH\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Update multiple user fields at once"
},
"response": []
},
{
"name": "Update User - Invalid Email",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 400 Bad Request\", function() {",
"    pm.response.to.have.status(400);",
"});",
"",
"pm.test(\"Response contains validation error for email\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    pm.expect(responseData.errors).to.be.an('object');",
"    pm.expect(responseData.errors).to.have.property('email');",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"email\": \"invalid-email-format\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Attempt to update with invalid email format"
},
"response": []
},
{
"name": "Update User - Invalid Phone",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 400 Bad Request\", function() {",
"    pm.response.to.have.status(400);",
"});",
"",
"pm.test(\"Response contains validation error for phone\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    pm.expect(responseData.errors).to.be.an('object');",
"    pm.expect(responseData.errors).to.have.property('phone');",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"phone\": \"invalid-phone\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Attempt to update with invalid phone format"
},
"response": []
},
{
"name": "Update User - Unauthenticated",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Response indicates authentication error\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"email\": \"unauthorized@example.com\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Attempt to update user without authentication"
},
"response": []
}
]
},
{
"name": "Password Management Tests",
"item": [
{
"name": "Change Password - Success",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"Response indicates password changed successfully\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData).to.be.an('object');",
"    pm.expect(responseData.success).to.be.true;",
"    pm.expect(responseData.message).to.equal(\"Password changed successfully\");",
"    ",
"    // Update environment variable for subsequent tests",
"    pm.environment.set(\"testPassword\", pm.environment.get(\"newPassword\"));",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"currentPassword\": \"{{testPassword}}\",\n    \"newPassword\": \"{{newPassword}}\",\n    \"confirmPassword\": \"{{newPassword}}\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/change-password",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"change-password"
]
},
"description": "Change user password with valid current password"
},
"response": []
},
{
"name": "Change Password - Wrong Current Password",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Response indicates incorrect current password\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    pm.expect(responseData.message).to.include(\"incorrect\");",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"currentPassword\": \"WrongPassword123!\",\n    \"newPassword\": \"AnotherNew456!\",\n    \"confirmPassword\": \"AnotherNew456!\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/change-password",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"change-password"
]
},
"description": "Attempt to change password with incorrect current password"
},
"response": []
},
{
"name": "Change Password - Password Mismatch",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Response indicates password mismatch\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    pm.expect(responseData.message).to.include(\"do not match\");",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"currentPassword\": \"{{testPassword}}\",\n    \"newPassword\": \"NewPassword123!\",\n    \"confirmPassword\": \"DifferentPassword456!\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/change-password",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"change-password"
]
},
"description": "Attempt to change password with mismatched new password and confirmation"
},
"response": []
},
{
"name": "Change Password - Weak New Password",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 400 Bad Request\", function() {",
"    pm.response.to.have.status(400);",
"});",
"",
"pm.test(\"Response contains validation error for weak password\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    pm.expect(responseData.errors).to.be.an('object');",
"    pm.expect(responseData.errors).to.have.property('newPassword');",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"currentPassword\": \"{{testPassword}}\",\n    \"newPassword\": \"weak\",\n    \"confirmPassword\": \"weak\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/change-password",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"change-password"
]
},
"description": "Attempt to change password with a weak new password"
},
"response": []
},
{
"name": "Change Password - Missing Fields",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 400 Bad Request\", function() {",
"    pm.response.to.have.status(400);",
"});",
"",
"pm.test(\"Response contains validation errors for missing fields\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    pm.expect(responseData.errors).to.be.an('object');",
"    pm.expect(responseData.errors).to.have.property('currentPassword');",
"    pm.expect(responseData.errors).to.have.property('newPassword');",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"confirmPassword\": \"OnlyConfirmPassword123!\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/change-password",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"change-password"
]
},
"description": "Attempt to change password without providing required fields"
},
"response": []
},
{
"name": "Change Password - Unauthenticated",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Response indicates authentication error\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"currentPassword\": \"SomePassword123!\",\n    \"newPassword\": \"NewPassword456!\",\n    \"confirmPassword\": \"NewPassword456!\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/change-password",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"change-password"
]
},
"description": "Attempt to change password without authentication"
},
"response": []
}
]
},
{
"name": "Login After Password Change",
"item": [
{
"name": "Login With New Password - Success",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"Login successful with new password\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.true;",
"    pm.expect(responseData.message).to.equal(\"Login successful\");",
"    pm.expect(responseData.data.token).to.be.a('string');",
"    pm.expect(responseData.data.user.email).to.equal(pm.environment.get(\"testEmail\"));",
"    ",
"    // Update token for subsequent tests",
"    pm.environment.set(\"authToken\", responseData.data.token);",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"emailOrPhone\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
},
"url": {
"raw": "{{baseUrl}}/auth/login",
"host": [
"{{baseUrl}}"
],
"path": [
"auth",
"login"
]
},
"description": "Login with the new password to verify password change worked"
},
"response": []
},
{
"name": "Login With Old Password - Should Fail",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Login fails with old password\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    pm.expect(responseData.message).to.include(\"Invalid\");",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"emailOrPhone\": \"{{testEmail}}\",\n    \"password\": \"UserMgmt123!\"\n}"
},
"url": {
"raw": "{{baseUrl}}/auth/login",
"host": [
"{{baseUrl}}"
],
"path": [
"auth",
"login"
]
},
"description": "Attempt to login with the old password (should fail)"
},
"response": []
}
]
},
{
"name": "User Data Validation Tests",
"item": [
{
"name": "Update User - Email Already Exists",
"event": [
{
"listen": "prerequest",
"script": {
"exec": [
"// Create another user to test email conflict",
"const timestamp = new Date().getTime();",
"const conflictEmail = `conflict.${timestamp}@example.com`;",
"pm.environment.set(\"conflictEmail\", conflictEmail);",
"",
"const registerRequest = {",
"    url: pm.environment.get(\"baseUrl\") + \"/auth/register\",",
"    method: 'POST',",
"    header: {",
"        'Content-Type': 'application/json'",
"    },",
"    body: {",
"        mode: 'raw',",
"        raw: JSON.stringify({",
"            email: conflictEmail,",
"            password: \"ConflictUser123!\",",
"            languagePreference: \"ENGLISH\"",
"        })",
"    }",
"};",
"",
"pm.sendRequest(registerRequest, function(err, response) {",
"    if (!err && response.code === 201) {",
"        console.log(`Created conflict user: ${conflictEmail}`);",
"    }",
"});"
],
"type": "text/javascript"
}
},
{
"listen": "test",
"script": {
"exec": [
"// This test might pass if no conflict detection is implemented",
"// or fail with 400/409 if conflict detection exists",
"pm.test(\"Email conflict handled appropriately\", function() {",
"    // Accept either success (no conflict check) or conflict error",
"    const statusCode = pm.response.code;",
"    pm.expect([200, 400, 409]).to.include(statusCode);",
"});",
"",
"if (pm.response.code !== 200) {",
"    pm.test(\"Response indicates email conflict\", function() {",
"        const responseData = pm.response.json();",
"        pm.expect(responseData.success).to.be.false;",
"    });",
"}"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"email\": \"{{conflictEmail}}\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Attempt to update email to one that already exists"
},
"response": []
},
{
"name": "Update User - Invalid Language Preference",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 400 Bad Request\", function() {",
"    pm.response.to.have.status(400);",
"});",
"",
"pm.test(\"Response contains validation error for language preference\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    // May not have specific validation for enum values depending on implementation",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"languagePreference\": \"INVALID_LANGUAGE\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Attempt to update with invalid language preference"
},
"response": []
},
{
"name": "Get User Info After All Updates",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"User data reflects all valid updates\", function() {",
"    const responseData = pm.response.json();",
"    const userData = responseData.data;",
"    ",
"    // Verify all updates are preserved",
"    pm.expect(userData.email).to.equal(pm.environment.get(\"testEmail\"));",
"    pm.expect(userData.phone).to.equal(pm.environment.get(\"testPhone\"));",
"    pm.expect(userData.languagePreference).to.equal(\"FRENCH\");",
"    ",
"    // Verify timestamps",
"    pm.expect(userData.createdAt).to.be.a('string');",
"    pm.expect(userData.lastLogin).to.be.a('string');",
"    ",
"    // Verify data integrity",
"    pm.expect(userData.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "GET",
"header": [
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Get user info to verify all updates are preserved"
},
"response": []
}
]
},
{
"name": "Account Deletion Tests",
"item": [
{
"name": "Create Temp User For Deletion",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Temp user created for deletion test\", function() {",
"    pm.response.to.have.status(201);",
"    ",
"    const responseData = pm.response.json();",
"    pm.expect(responseData.success).to.be.true;",
"    ",
"    // Store temporary user data",
"    pm.environment.set(\"tempAuthToken\", responseData.data.token);",
"    pm.environment.set(\"tempUserId\", responseData.data.user.id);",
"    pm.environment.set(\"tempUserEmail\", responseData.data.user.email);",
"    ",
"    console.log(`Temp user created for deletion: ${responseData.data.user.email}`);",
"});"
],
"type": "text/javascript"
}
},
{
"listen": "prerequest",
"script": {
"exec": [
"// Generate unique email for temp user",
"const timestamp = new Date().getTime();",
"const tempEmail = `temp.delete.${timestamp}@example.com`;",
"pm.environment.set(\"tempUserEmailForDeletion\", tempEmail);"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"email\": \"{{tempUserEmailForDeletion}}\",\n    \"password\": \"TempUser123!\",\n    \"languagePreference\": \"ENGLISH\"\n}"
},
"url": {
"raw": "{{baseUrl}}/auth/register",
"host": [
"{{baseUrl}}"
],
"path": [
"auth",
"register"
]
},
"description": "Create a temporary user specifically for deletion testing"
},
"response": []
},
{
"name": "Delete Account - Success",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 200 OK\", function() {",
"    pm.response.to.have.status(200);",
"});",
"",
"pm.test(\"Response indicates account deleted successfully\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData).to.be.an('object');",
"    pm.expect(responseData.success).to.be.true;",
"    pm.expect(responseData.message).to.equal(\"Account deleted successfully\");",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "DELETE",
"header": [
{
"key": "Authorization",
"value": "Bearer {{tempAuthToken}}"
}
],
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Delete the temporary user account"
},
"response": []
},
{
"name": "Verify Account Deletion - Cannot Login",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Login fails for deleted account\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"    pm.expect(responseData.message).to.include(\"Invalid\");",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "POST",
"header": [
{
"key": "Content-Type",
"value": "application/json"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"emailOrPhone\": \"{{tempUserEmailForDeletion}}\",\n    \"password\": \"TempUser123!\"\n}"
},
"url": {
"raw": "{{baseUrl}}/auth/login",
"host": [
"{{baseUrl}}"
],
"path": [
"auth",
"login"
]
},
"description": "Attempt to login with deleted account credentials"
},
"response": []
},
{
"name": "Verify Account Deletion - Cannot Access Data",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Cannot access data with deleted account token\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "GET",
"header": [
{
"key": "Authorization",
"value": "Bearer {{tempAuthToken}}"
}
],
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Attempt to access user data with token from deleted account"
},
"response": []
},
{
"name": "Delete Account - Unauthenticated",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Response indicates authentication error\", function() {",
"    const responseData = pm.response.json();",
"    ",
"    pm.expect(responseData.success).to.be.false;",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "DELETE",
"header": [],
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Attempt to delete account without authentication"
},
"response": []
}
]
},
{
"name": "Security and Edge Cases",
"item": [
{
"name": "Token Expiration Test",
"event": [
{
"listen": "test",
"script": {
"exec": [
"// This test depends on JWT expiration configuration",
"// For now, just test with an obviously expired/invalid token",
"pm.test(\"Status code is 401 Unauthorized\", function() {",
"    pm.response.to.have.status(401);",
"});",
"",
"pm.test(\"Response indicates invalid token\", function() {",
"    const responseData = pm.response.json();",
"    pm.expect(responseData.success).to.be.false;",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "GET",
"header": [
{
"key": "Authorization",
"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.invalid_signature"
}
],
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Test with expired/invalid JWT token"
},
"response": []
},
{
"name": "SQL Injection Test - Email Field",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"SQL injection attempt handled safely\", function() {",
"    // Should return validation error, not expose database",
"    const statusCode = pm.response.code;",
"    pm.expect([400, 401]).to.include(statusCode);",
"});",
"",
"pm.test(\"No database error exposed\", function() {",
"    const responseText = pm.response.text();",
"    ",
"    // Check that no SQL error messages are exposed",
"    pm.expect(responseText).to.not.include(\"SQL\");",
"    pm.expect(responseText).to.not.include(\"database\");",
"    pm.expect(responseText).to.not.include(\"syntax error\");",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"email\": \"'; DROP TABLE users; --\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Test SQL injection attempt in email field"
},
"response": []
},
{
"name": "XSS Test - User Fields",
"event": [
{
"listen": "test",
"script": {
"exec": [
"pm.test(\"XSS attempt handled safely\", function() {",
"    const statusCode = pm.response.code;",
"    pm.expect([200, 400]).to.include(statusCode);",
"});",
"",
"pm.test(\"No script execution or unescaped content\", function() {",
"    const responseText = pm.response.text();",
"    ",
"    // If accepted, ensure it's properly escaped/sanitized",
"    if (pm.response.code === 200) {",
"        const responseData = pm.response.json();",
"        if (responseData.data && responseData.data.email) {",
"            // Email should be sanitized or rejected",
"            pm.expect(responseData.data.email).to.not.include('<script>');",
"        }",
"    }",
"});"
],
"type": "text/javascript"
}
}
],
"request": {
"method": "PUT",
"header": [
{
"key": "Content-Type",
"value": "application/json"
},
{
"key": "Authorization",
"value": "Bearer {{authToken}}"
}
],
"body": {
"mode": "raw",
"raw": "{\n    \"email\": \"<script>alert('xss')</script>@example.com\"\n}"
},
"url": {
"raw": "{{baseUrl}}/users/me",
"host": [
"{{baseUrl}}"
],
"path": [
"users",
"me"
]
},
"description": "Test XSS attempt in user fields"
},
"response": []
},
{
"name": "Large Payload Test",
"event": [
{
"listen": "prerequest",
"script": {
"exec": [
"// Generate a very long string for testing",
"const longString = 'a'.repeat(10000);",
"pm.environment.set(\"longString\", longString);"
],
"type": "text