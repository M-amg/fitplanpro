{
  "info": {
    "_postman_id": "d1e2f3g4-h5i6-j7k8-l9m0-n1o2p3q4r5s6",
    "name": "FitPlanPro - Achievement Management API Tests",
    "description": "Non-Regression Tests for FitPlanPro Achievement Management API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Environment Setup",
      "item": [
        {
          "name": "Multiple Achievement Categories Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains expected achievement categories\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const summary = responseData.data;",
                  "    ",
                  "    // Verify all expected achievement categories are represented",
                  "    const categories = summary.categorySummaries.map(cat => cat.category);",
                  "    ",
                  "    // The following categories should exist in the system",
                  "    // We check that at least some of them are present",
                  "    const expectedCategories = [",
                  "        \"WEIGHT_MILESTONE\", ",
                  "        \"WORKOUT_CONSISTENCY\", ",
                  "        \"NUTRITION_ADHERENCE\", ",
                  "        \"WATER_INTAKE\", ",
                  "        \"STEPS\", ",
                  "        \"SPECIAL_CHALLENGE\", ",
                  "        \"APP_USAGE\"",
                  "    ];",
                  "    ",
                  "    // Check that at least one expected category exists",
                  "    const hasExpectedCategory = categories.some(cat => expectedCategories.includes(cat));",
                  "    pm.expect(hasExpectedCategory).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/summary",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "summary"
              ]
            },
            "description": "Check that multiple achievement categories are represented in the system"
          },
          "response": []
        },
        {
          "name": "Achievement Points Range Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Achievement points are within valid range\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const achievementTypes = responseData.data;",
                  "    ",
                  "    // Check that all achievement points are within the allowed range (5-100)",
                  "    achievementTypes.forEach(function(achievementType) {",
                  "        pm.expect(achievementType.points).to.be.at.least(5);",
                  "        pm.expect(achievementType.points).to.be.at.most(100);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types"
              ]
            },
            "description": "Check that all achievement points are within the valid range"
          },
          "response": []
        },
        {
          "name": "Achievement Progress Validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK for valid progress\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test valid progress values at boundaries",
                  "// First, we update progress to 1 (minimum)",
                  "const minProgressRequest = {",
                  "    url: pm.environment.get(\"baseUrl\") + \"/achievements/progress\",",
                  "    method: 'PUT',",
                  "    header: {",
                  "        'Content-Type': 'application/json',",
                  "        'Authorization': 'Bearer ' + pm.environment.get(\"adminAuthToken\")",
                  "    },",
                  "    body: {",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify({",
                  "            achievementId: parseInt(pm.environment.get(\"achievementId\")),",
                  "            progress: 1",
                  "        })",
                  "    }",
                  "};",
                  "",
                  "pm.sendRequest(minProgressRequest, function(err, response) {",
                  "    pm.expect(response.code).to.equal(200);",
                  "    const responseData = response.json();",
                  "    pm.expect(responseData.data.progress).to.equal(1);",
                  "});",
                  "",
                  "// Then, update progress to 100 (maximum)",
                  "const maxProgressRequest = {",
                  "    url: pm.environment.get(\"baseUrl\") + \"/achievements/progress\",",
                  "    method: 'PUT',",
                  "    header: {",
                  "        'Content-Type': 'application/json',",
                  "        'Authorization': 'Bearer ' + pm.environment.get(\"adminAuthToken\")",
                  "    },",
                  "    body: {",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify({",
                  "            achievementId: parseInt(pm.environment.get(\"achievementId\")),",
                  "            progress: 100",
                  "        })",
                  "    }",
                  "};",
                  "",
                  "pm.sendRequest(maxProgressRequest, function(err, response) {",
                  "    pm.expect(response.code).to.equal(200);",
                  "    const responseData = response.json();",
                  "    pm.expect(responseData.data.progress).to.equal(100);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"achievementId\": {{achievementId}},\n    \"progress\": 50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/progress",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "progress"
              ]
            },
            "description": "Test achievement progress boundary values"
          },
          "response": []
        },
        {
          "name": "Initialize Test Environment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Set base URL for API",
                  "pm.environment.set(\"baseUrl\", \"http://localhost:8080/api\");",
                  "",
                  "// Generate unique test data",
                  "const timestamp = new Date().getTime();",
                  "const testEmail = `achievement.${timestamp}@example.com`;",
                  "const testPhone = `+1${Math.floor(1000000000 + Math.random() * 9000000000)}`;",
                  "const testPassword = \"Achievement123!\";",
                  "",
                  "pm.environment.set(\"testEmail\", testEmail);",
                  "pm.environment.set(\"testPhone\", testPhone);",
                  "pm.environment.set(\"testPassword\", testPassword);",
                  "",
                  "// Generate admin test data",
                  "const adminEmail = `admin.${timestamp}@example.com`;",
                  "pm.environment.set(\"adminEmail\", adminEmail);",
                  "pm.environment.set(\"adminPassword\", \"Admin123!\");",
                  "",
                  "console.log(`Test email: ${testEmail}`);",
                  "console.log(`Test phone: ${testPhone}`);",
                  "",
                  "pm.test(\"Environment variables initialized successfully\", function() {",
                  "    pm.expect(pm.environment.get(\"baseUrl\")).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get(\"testEmail\")).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get(\"testPassword\")).to.not.be.undefined;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}",
              "host": [
                "{{baseUrl}}"
              ]
            },
            "description": "Initialize environment variables for achievement testing"
          },
          "response": []
        },
        {
          "name": "Create Test User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Test user created successfully\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.token).to.be.a('string');",
                  "    ",
                  "    // Store authentication data",
                  "    pm.environment.set(\"authToken\", responseData.data.token);",
                  "    pm.environment.set(\"userId\", responseData.data.user.id);",
                  "    ",
                  "    console.log(`Test user created with ID: ${responseData.data.user.id}`);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"phone\": \"{{testPhone}}\",\n    \"password\": \"{{testPassword}}\",\n    \"languagePreference\": \"ENGLISH\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "description": "Create a test user for achievement testing"
          },
          "response": []
        },
        {
          "name": "Create Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Admin user created successfully\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    ",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.data.token).to.be.a('string');",
                  "    ",
                  "    // Store admin authentication data",
                  "    pm.environment.set(\"adminAuthToken\", responseData.data.token);",
                  "    pm.environment.set(\"adminId\", responseData.data.user.id);",
                  "    ",
                  "    console.log(`Admin user created with ID: ${responseData.data.user.id}`);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"languagePreference\": \"ENGLISH\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "description": "Create an admin user for achievement creation tests"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Achievement Types Tests",
      "item": [
        {
          "name": "Get All Achievement Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Achievement types retrieved successfully\");",
                  "    pm.expect(responseData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Achievement types data structure is correct\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const achievementTypes = responseData.data;",
                  "    ",
                  "    if (achievementTypes.length > 0) {",
                  "        pm.expect(achievementTypes[0]).to.have.property('id');",
                  "        pm.expect(achievementTypes[0]).to.have.property('name');",
                  "        pm.expect(achievementTypes[0]).to.have.property('description');",
                  "        pm.expect(achievementTypes[0]).to.have.property('category');",
                  "        pm.expect(achievementTypes[0]).to.have.property('points');",
                  "        ",
                  "        // Store first achievement type ID for future tests",
                  "        pm.environment.set(\"achievementTypeId\", achievementTypes[0].id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types"
              ]
            },
            "description": "Get all achievement types"
          },
          "response": []
        },
        {
          "name": "Get Achievement Types by Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Achievement types retrieved successfully\");",
                  "    pm.expect(responseData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Achievement types are filtered by category\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const achievementTypes = responseData.data;",
                  "    ",
                  "    achievementTypes.forEach(function(achievementType) {",
                  "        pm.expect(achievementType.category).to.equal(\"WORKOUT_CONSISTENCY\");",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/types/category/WORKOUT_CONSISTENCY",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types",
                "category",
                "WORKOUT_CONSISTENCY"
              ]
            },
            "description": "Get achievement types by category"
          },
          "response": []
        },
        {
          "name": "Get Achievement Types - Invalid Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates invalid category\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"Invalid\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/types/category/INVALID_CATEGORY",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types",
                "category",
                "INVALID_CATEGORY"
              ]
            },
            "description": "Attempt to get achievement types with invalid category"
          },
          "response": []
        },
        {
          "name": "Get Achievement Types - Unauthenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response indicates authentication error\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/achievements/types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types"
              ]
            },
            "description": "Attempt to get achievement types without authentication"
          },
          "response": []
        },
        {
          "name": "Create Achievement Type - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Achievement type created successfully\");",
                  "    pm.expect(responseData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Achievement type data matches input\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const achievementType = responseData.data;",
                  "    ",
                  "    pm.expect(achievementType.name).to.equal(\"Test Achievement\");",
                  "    pm.expect(achievementType.description).to.equal(\"Achievement for testing purposes\");",
                  "    pm.expect(achievementType.category).to.equal(\"SPECIAL_CHALLENGE\");",
                  "    pm.expect(achievementType.points).to.equal(50);",
                  "    ",
                  "    // Store created achievement type ID for future tests",
                  "    pm.environment.set(\"createdAchievementTypeId\", achievementType.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Achievement\",\n    \"description\": \"Achievement for testing purposes\",\n    \"category\": \"SPECIAL_CHALLENGE\",\n    \"iconUrl\": \"https://example.com/icons/test.png\",\n    \"points\": 50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types"
              ]
            },
            "description": "Create a new achievement type (admin only)"
          },
          "response": []
        },
        {
          "name": "Create Achievement Type - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation errors for missing fields\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.errors).to.be.an('object');",
                  "    pm.expect(responseData.errors).to.have.property('name');",
                  "    pm.expect(responseData.errors).to.have.property('description');",
                  "    pm.expect(responseData.errors).to.have.property('category');",
                  "    pm.expect(responseData.errors).to.have.property('points');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"iconUrl\": \"https://example.com/icons/test.png\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types"
              ]
            },
            "description": "Attempt to create an achievement type without required fields"
          },
          "response": []
        },
        {
          "name": "Create Achievement Type - Invalid Values",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation errors for invalid values\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.errors).to.be.an('object');",
                  "    pm.expect(responseData.errors).to.have.property('points');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Invalid Achievement\",\n    \"description\": \"Achievement with invalid points\",\n    \"category\": \"SPECIAL_CHALLENGE\",\n    \"iconUrl\": \"https://example.com/icons/test.png\",\n    \"points\": 150\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types"
              ]
            },
            "description": "Attempt to create an achievement type with invalid values"
          },
          "response": []
        },
        {
          "name": "Create Achievement Type - Non-Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function() {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Response indicates permission error\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"Forbidden\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": {{userId}},\n    \"achievementTypeId\": {{achievementTypeId}},\n    \"progress\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/grant",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "grant"
              ]
            },
            "description": "Attempt to grant an achievement as a non-admin user"
          },
          "response": []
        },
        {
          "name": "Update Achievement Progress",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Non-Admin Achievement\",\n    \"description\": \"Achievement created by non-admin\",\n    \"category\": \"SPECIAL_CHALLENGE\",\n    \"iconUrl\": \"https://example.com/icons/test.png\",\n    \"points\": 50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types"
              ]
            },
            "description": "Attempt to create an achievement type as a non-admin user"
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Achievements Tests",
      "item": [
        {
          "name": "Get User Achievements",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Achievements retrieved successfully\");",
                  "    pm.expect(responseData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements"
              ]
            },
            "description": "Get user's achievements"
          },
          "response": []
        },
        {
          "name": "Get User Achievements by Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Achievements retrieved successfully\");",
                  "    pm.expect(responseData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Achievements are filtered by category\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const achievements = responseData.data;",
                  "    ",
                  "    if (achievements.length > 0) {",
                  "        achievements.forEach(function(achievement) {",
                  "            pm.expect(achievement.achievementType.category).to.equal(\"WORKOUT_CONSISTENCY\");",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/category/WORKOUT_CONSISTENCY",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "category",
                "WORKOUT_CONSISTENCY"
              ]
            },
            "description": "Get user's achievements by category"
          },
          "response": []
        },
        {
          "name": "Get User Achievement Summary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Achievement summary retrieved successfully\");",
                  "    pm.expect(responseData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Summary contains expected fields\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const summary = responseData.data;",
                  "    ",
                  "    pm.expect(summary).to.have.property('userId');",
                  "    pm.expect(summary).to.have.property('totalAchievements');",
                  "    pm.expect(summary).to.have.property('totalPoints');",
                  "    pm.expect(summary).to.have.property('categorySummaries');",
                  "    pm.expect(summary).to.have.property('recentAchievements');",
                  "    ",
                  "    pm.expect(summary.userId).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/summary",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "summary"
              ]
            },
            "description": "Get user's achievement summary"
          },
          "response": []
        },
        {
          "name": "Grant Achievement",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Achievement granted successfully\");",
                  "    pm.expect(responseData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Granted achievement data is correct\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const achievement = responseData.data;",
                  "    ",
                  "    pm.expect(achievement.userId).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "    pm.expect(achievement.achievementType.id).to.equal(parseInt(pm.environment.get(\"achievementTypeId\")));",
                  "    pm.expect(achievement.progress).to.equal(100);",
                  "    ",
                  "    // Store achievement ID for future tests",
                  "    pm.environment.set(\"achievementId\", achievement.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": {{userId}},\n    \"achievementTypeId\": {{achievementTypeId}},\n    \"progress\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/grant",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "grant"
              ]
            },
            "description": "Grant an achievement to a user"
          },
          "response": []
        },
        {
          "name": "Grant Achievement - Invalid User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response indicates user not found\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": 99999,\n    \"achievementTypeId\": {{achievementTypeId}},\n    \"progress\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/grant",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "grant"
              ]
            },
            "description": "Attempt to grant an achievement to a non-existent user"
          },
          "response": []
        },
        {
          "name": "Grant Achievement - Invalid Achievement Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response indicates achievement type not found\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": {{userId}},\n    \"achievementTypeId\": 99999,\n    \"progress\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/grant",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "grant"
              ]
            },
            "description": "Attempt to grant an achievement with non-existent achievement type"
          },
          "response": []
        },
        {
          "name": "Grant Achievement - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation errors for missing fields\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.errors).to.be.an('object');",
                  "    pm.expect(responseData.errors).to.have.property('userId');",
                  "    pm.expect(responseData.errors).to.have.property('achievementTypeId');",
                  "    pm.expect(responseData.errors).to.have.property('progress');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/grant",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "grant"
              ]
            },
            "description": "Attempt to grant an achievement without required fields"
          },
          "response": []
        },
        {
          "name": "Grant Achievement - Invalid Progress Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error for progress\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.errors).to.be.an('object');",
                  "    pm.expect(responseData.errors).to.have.property('progress');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": {{userId}},\n    \"achievementTypeId\": {{achievementTypeId}},\n    \"progress\": 150\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/grant",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "grant"
              ]
            },
            "description": "Attempt to grant an achievement with invalid progress value (>100)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Achievement Progress Tests",
      "item": [
        {
          "name": "Update Achievement Progress - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Achievement progress updated successfully\");",
                  "    pm.expect(responseData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Progress has been updated correctly\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const achievement = responseData.data;",
                  "    ",
                  "    pm.expect(achievement.progress).to.equal(75);",
                  "    pm.expect(achievement.id).to.equal(parseInt(pm.environment.get(\"achievementId\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"achievementId\": {{achievementId}},\n    \"progress\": 75\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/progress",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "progress"
              ]
            },
            "description": "Update achievement progress to 75%"
          },
          "response": []
        },
        {
          "name": "Update Achievement Progress - Complete Achievement",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Achievement is completed\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const achievement = responseData.data;",
                  "    ",
                  "    pm.expect(achievement.progress).to.equal(100);",
                  "    pm.expect(achievement.achievedAt).to.not.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"achievementId\": {{achievementId}},\n    \"progress\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/progress",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "progress"
              ]
            },
            "description": "Complete the achievement by setting progress to 100%"
          },
          "response": []
        },
        {
          "name": "Update Achievement Progress - Invalid Achievement ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function() {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response indicates achievement not found\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"not found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"achievementId\": 99999,\n    \"progress\": 50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/progress",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "progress"
              ]
            },
            "description": "Attempt to update progress for non-existent achievement"
          },
          "response": []
        },
        {
          "name": "Update Achievement Progress - Invalid Progress Range",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error for progress\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.errors).to.be.an('object');",
                  "    pm.expect(responseData.errors).to.have.property('progress');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"achievementId\": {{achievementId}},\n    \"progress\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/progress",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "progress"
              ]
            },
            "description": "Attempt to update progress with invalid value (0)"
          },
          "response": []
        },
        {
          "name": "Update Achievement Progress - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function() {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Response indicates permission error\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"Forbidden\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"achievementId\": {{achievementId}},\n    \"progress\": 90\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/progress",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "progress"
              ]
            },
            "description": "Attempt to update achievement progress as non-admin user"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Achievement Summary Tests",
      "item": [
        {
          "name": "Get Achievement Summary - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData).to.be.an('object');",
                  "    pm.expect(responseData.success).to.be.true;",
                  "    pm.expect(responseData.message).to.equal(\"Achievement summary retrieved successfully\");",
                  "    pm.expect(responseData.data).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Summary contains expected fields\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const summary = responseData.data;",
                  "    ",
                  "    pm.expect(summary).to.have.property('userId');",
                  "    pm.expect(summary).to.have.property('totalAchievements');",
                  "    pm.expect(summary).to.have.property('totalPoints');",
                  "    pm.expect(summary).to.have.property('categorySummaries');",
                  "    pm.expect(summary).to.have.property('recentAchievements');",
                  "    ",
                  "    pm.expect(summary.userId).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "    pm.expect(summary.totalAchievements).to.be.at.least(1);",
                  "    pm.expect(summary.totalPoints).to.be.at.least(1);",
                  "    pm.expect(summary.categorySummaries).to.be.an('array');",
                  "    pm.expect(summary.recentAchievements).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/summary",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "summary"
              ]
            },
            "description": "Get user's achievement summary"
          },
          "response": []
        },
        {
          "name": "Get Achievement Summary - Unauthenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response indicates authentication error\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/achievements/summary",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "summary"
              ]
            },
            "description": "Attempt to get achievement summary without authentication"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Achievement Edge Cases",
      "item": [
        {
          "name": "Grant Duplicate Achievement",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Duplicate achievement handled correctly\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const achievement = responseData.data;",
                  "    ",
                  "    // Should return existing achievement or update progress",
                  "    pm.expect(achievement).to.have.property('id');",
                  "    pm.expect(achievement.userId).to.equal(parseInt(pm.environment.get(\"userId\")));",
                  "    pm.expect(achievement.achievementType.id).to.equal(parseInt(pm.environment.get(\"achievementTypeId\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": {{userId}},\n    \"achievementTypeId\": {{achievementTypeId}},\n    \"progress\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/grant",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "grant"
              ]
            },
            "description": "Attempt to grant the same achievement again"
          },
          "response": []
        },
        {
          "name": "Get Achievements by Invalid Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates invalid category\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"Invalid\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/category/INVALID_CATEGORY",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "category",
                "INVALID_CATEGORY"
              ]
            },
            "description": "Attempt to get achievements with invalid category"
          },
          "response": []
        },
        {
          "name": "Create Achievement Type - Duplicate Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function() {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates duplicate name error\", function() {",
                  "    const responseData = pm.response.json();",
                  "    ",
                  "    pm.expect(responseData.success).to.be.false;",
                  "    pm.expect(responseData.message).to.include(\"already exists\").or.include(\"duplicate\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAuthToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Achievement\",\n    \"description\": \"Another achievement for testing purposes\",\n    \"category\": \"SPECIAL_CHALLENGE\",\n    \"iconUrl\": \"https://example.com/icons/test2.png\",\n    \"points\": 75\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/achievements/types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "types"
              ]
            },
            "description": "Attempt to create achievement type with duplicate name"
          },
          "response": []
        },
        {
          "name": "Test Achievement Category Boundaries",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All valid categories are supported\", function() {",
                  "    const responseData = pm.response.json();",
                  "    const summary = responseData.data;",
                  "    ",
                  "    // Verify all expected achievement categories are represented",
                  "    const categories = summary.categorySummaries.map(cat => cat.category);",
                  "    ",
                  "    // The following categories should exist in the system",
                  "    const expectedCategories = [",
                  "        \"WEIGHT_MILESTONE\", ",
                  "        \"WORKOUT_CONSISTENCY\", ",
                  "        \"NUTRITION_ADHERENCE\", ",
                  "        \"WATER_INTAKE\", ",
                  "        \"STEPS\", ",
                  "        \"SPECIAL_CHALLENGE\", ",
                  "        \"APP_USAGE\"",
                  "    ];",
                  "    ",
                  "    // Check that we have at least some of the expected categories",
                  "    const hasExpectedCategory = categories.some(cat => expectedCategories.includes(cat));",
                  "    pm.expect(hasExpectedCategory).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/achievements/summary",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "achievements",
                "summary"
              ]
            },
            "description": "Test that all achievement categories are properly supported"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Ensure we have required environment variables",
          "if (!pm.environment.get(\"baseUrl\")) {",
          "    pm.environment.set(\"baseUrl\", \"http://localhost:8080/api\");",
          "}",
          "",
          "// Log current request for debugging",
          "console.log(`Executing: ${pm.info.requestName}`);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to ensure response time is reasonable",
          "pm.test(\"Response time is less than 3000ms\", function() {",
          "    pm.expect(pm.response.responseTime).to.be.below(3000);",
          "});",
          "",
          "// Global test to ensure response has proper content-type",
          "if (pm.response.code !== 401 && pm.response.code !== 403) {",
          "    pm.test(\"Response content-type is application/json\", function() {",
          "        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/api",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "",
      "type": "string"
    },
    {
      "key": "testPhone",
      "value": "",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminPassword",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminAuthToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminId",
      "value": "",
      "type": "string"
    },
    {
      "key": "achievementTypeId",
      "value": "",
      "type": "string"
    },
    {
      "key": "createdAchievementTypeId",
      "value": "",
      "type": "string"
    },
    {
      "key": "achievementId",
      "value": "",
      "type": "string"
    }
  ]
}