package com.fitplanpro.repository;

import com.fitplanpro.entity.Plan;
import com.fitplanpro.enums.PlanType;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface PlanRepository extends JpaRepository<Plan, Long> {

    /**
     * Find plans by profile hash
     *
     * @param profileHash the profile hash to search for
     * @return a list of matching plans
     */
    List<Plan> findByProfileHash(String profileHash);

    /**
     * Find plans by profile hash and plan type
     *
     * @param profileHash the profile hash to search for
     * @param planType the plan type to filter by
     * @return a list of matching plans
     */
    List<Plan> findByProfileHashAndPlanType(String profileHash, PlanType planType);

    /**
     * Find the most recent plan for a profile hash and plan type
     *
     * @param profileHash the profile hash to search for
     * @param planType the plan type to filter by
     * @return an Optional containing the most recent plan if found
     */
    Optional<Plan> findTopByProfileHashAndPlanTypeOrderByGenerationTimeDesc(
            String profileHash, PlanType planType);

    /**
     * Find similar plans with high similarity scores
     *
     * @param gender the gender parameter
     * @param ageMin minimum age range
     * @param ageMax maximum age range
     * @param goalType the goal type
     * @param weightMin minimum weight range
     * @param weightMax maximum weight range
     * @param heightMin minimum height range
     * @param heightMax maximum height range
     * @param planType the plan type
     * @return a list of matching plans with high similarity
     */
    @Query(value = "SELECT p.* FROM plans p " +
            "JOIN user_profiles up ON p.profile_hash = up.profile_hash " +
            "WHERE up.gender = :gender " +
            "AND up.age BETWEEN :ageMin AND :ageMax " +
            "AND up.goal_type = :goalType " +
            "AND up.current_weight BETWEEN :weightMin AND :weightMax " +
            "AND up.height BETWEEN :heightMin AND :heightMax " +
            "AND p.plan_type = :planType " +
            "AND p.similarity_score > 0.80 " +
            "ORDER BY p.similarity_score DESC, " +
            "ABS(up.current_weight - :targetWeight) ASC, " +
            "ABS(up.age - :targetAge) ASC " +
            "LIMIT 3", nativeQuery = true)
    List<Plan> findSimilarPlans(
            @Param("gender") String gender,
            @Param("ageMin") int ageMin,
            @Param("ageMax") int ageMax,
            @Param("goalType") String goalType,
            @Param("weightMin") float weightMin,
            @Param("weightMax") float weightMax,
            @Param("heightMin") float heightMin,
            @Param("heightMax") float heightMax,
            @Param("planType") String planType,
            @Param("targetWeight") float targetWeight,
            @Param("targetAge") int targetAge);

    /**
     * Find unexpired plans
     *
     * @param currentTime the current time to compare against expiry time
     * @return a list of unexpired plans
     */
    List<Plan> findByExpiryTimeIsNullOrExpiryTimeAfter(LocalDateTime currentTime);

    /**
     * Count plans generated by a specific AI model
     *
     * @param aiModelUsed the AI model to count plans for
     * @return the count of plans
     */
    long countByAiModelUsed(String aiModelUsed);
}